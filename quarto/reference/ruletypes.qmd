# Rule types

```{julia}
#| output: false
#| warning: false
#| echo: false


# Define a dataset to use in listing all occurrences of
# inflectional types:
repo = joinpath(pwd() |> dirname |> dirname)
shareddir = joinpath(repo, "datasets", "core-infl-shared") 
lat25dir = joinpath(repo, "datasets", "core-infl-lat25") 


using Tabulae
ds = dataset([shareddir, lat25dir])
```


## Reading and writing rule records


Tabulae defines a concrete subtype of the `TabulaeRule` abstraction for each kind of rule record that can be included in a Tabulae dataset.

 Each type implements the `fromcex` and `cex` functions from the `CitableBase` package.


```{julia}
using CitableBase
infinitiveruletext = "latcommon.are_inf1|conj1|are|present|active"
infinrule = fromcex(infinitiveruletext, TabulaeInfinitiveRule)
```



## Common functions

All rule types identify a morphological form, an inflectional type, and a string value for the stem, that you can retrieve with the following functions:

```{julia}
latinForm(infinrule)
```

```{julia}
inflectionclass(infinrule)
```

```{julia}
ending(infinrule)
```

## Examples of each rule type

### Finite verb form rules

The `TabulaeFiniteVerbRule` type:

```{julia}
finiteverbtext = "latcommon.are_conj1fut7|conj1dep|abor|first|singular|future|indicative|passive"
finiteverbrule = fromcex(finiteverbtext, TabulaeFiniteVerbRule)
```


::: {.callout-note collapse="true" title="See all inflectional types for `TabulaeFiniteVerbRule`s"}
```{julia}
#| asis: true
#| echo: false
using Markdown
rules = rulesarray(ds)
vrules = filter(s -> s isa TabulaeFiniteVerbRule, rules)
vbullets = map(s -> "1. " * inflectionclass(s), vrules) |> unique |> sort

join(vbullets, "\n") |> Markdown.parse
```
:::


### Infinitive rules

The `TabulaeInfinitiveRule` type:

```{julia}
infinitiveruletext = "latcommon.are_inf1|conj1|are|present|active"
infinrule = fromcex(infinitiveruletext, TabulaeInfinitiveRule)
```


::: {.callout-note collapse="true" title="See all inflectional types for `TabulaeInfinitiveRule`s"}
```{julia}
#| asis: true
#| echo: false
prules = filter(s -> s isa TabulaeInfinitiveRule, rules)
pbullets = map(s -> "1. " * inflectionclass(s), prules) |> unique |> sort

join(pbullets, "\n") |> Markdown.parse
```
:::


### Participle rules


The `TabulaeParticipleRule` type:

```{julia}
ptcplruletext = "latcommoninfl.are_conj1presapl2|conj1|antis|masculine|genitive|singular|present|active"
ptcplrule = fromcex(ptcplruletext, TabulaeParticipleRule)
```


::: {.callout-note collapse="true" title="See all inflectional types for `TabulaeParticipleRule`s"}
```{julia}
#| asis: true
#| echo: false
prules = filter(s -> s isa TabulaeParticipleRule, rules)
pbullets = map(s -> "1. " * inflectionclass(s), prules) |> unique |> sort

join(pbullets, "\n") |> Markdown.parse
```
:::





### Noun rules

`TabulaeNounRule`.


```{julia}
nounruletext = "latcommoninfl.0_is2|0_is|is|masculine|genitive|singular"
nounrule = fromcex(nounruletext, TabulaeNounRule)
```



::: {.callout-note collapse="true" title="See all inflectional types for `TabulaeNounRule`s"}
```{julia}
#| asis: true
#| echo: false

nounrules = filter(s -> s isa TabulaeNounRule, rules)
bullets = map(s -> "1. " * inflectionclass(s), nounrules) |> unique |> sort

join(bullets, "\n") |> Markdown.parse
```
:::


