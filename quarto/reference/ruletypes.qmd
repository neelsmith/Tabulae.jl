# Rule types

```{julia}
#| output: false
#| warning: false
#| echo: false

repo = joinpath(pwd() |> dirname |> dirname)
```



::: {.callout-warning title="Invalid content"}
This page is out of date and needs to be updated.
:::


## Reading and writing rule records


Tabulae defines a subtype of the `TabulaeRule` abstraction for each kind of rule record that can be included in a Tabulae dataset.  Each of the types implements the `readrulerow` and `writerulerow` functions to instantiate a stem from a delimited-text string.  For each stem type, there is a corresponding subtype of the abstract `TabulaeIO` that is used to dispatch `readrulerow` and `writerulerow` to the correct methods. To read an infinitive rule, for example, `readrulerow` is invoked with an instance of the `VerbIO` type.

We'll work with a dataset and a parser from the `datasets` directory of the Tabulae github repository (defined in the following cell).

```{julia}
#| warning: false
#| output: false
#| code-fold: true
#| code-summary: Define dataset and parser
shareddir = joinpath(repo, "datasets", "core-infl-shared") 
lat25dir = joinpath(repo, "datasets", "core-infl-lat25") 


using Tabulae
ds = dataset([shareddir, lat25dir])
p = tabulaeStringParser(ds)
```


```
infinitiveruletext = "latcommon.are_inf1|conj1|are|present|active"
infinio = InfinitiveIO("infinitive io")
infinrule = Tabulae.readrulerow(infinio, infinitiveruletext)
```



## Common functions

All rule types identify a morphological form, an inflectional type, and a string value for the stem, that you can retrieve with the following functions:

```
lmForm(infinrule) |> label
```

```
inflectionclass(infinrule)
```

```
ending(infinrule)
```



## Finite verb form rules

For finite forms


Inflectional types appearing in core dataset's participle rules:


```
#| asis: true
#| echo: false
using Markdown
rules = rulesarray(ds)
vrules = filter(s -> s isa TabulaeFiniteVerbRule, rules)
vbullets = map(s -> "1. " * inflectionclass(s), vrules) |> unique |> sort

join(vbullets, "\n") |> Markdown.parse
```



## Infinitive rules


- use an `InfinitiveIO` object to read delimited text. The result is an `TabulaeInfinitiveRule`.

```
infinitiveruletext = "latcommon.are_inf1|conj1|are|present|active"
infinio = InfinitiveIO("infinitive io")
infinrule = Tabulae.readrulerow(infinio, infinitiveruletext)
```

## Participle rules



- use a `ParticipleIO` object to read delimited text. The result is an `TabulaeParticipleRule`.

```
ptcplruletext = "latcommoninfl.are_conj1presapl2|conj1|antis|masculine|genitive|singular|present|active"

ptpclio = ParticipleIO("participle io")
infinrule = Tabulae.readrulerow(ptpclio, ptcplruletext)
```


Inflectional types appearing in the core dataset's participle rules:


```
#| asis: true
#| echo: false
prules = filter(s -> s isa TabulaeParticipleRule, rules)
pbullets = map(s -> "1. " * inflectionclass(s), prules) |> unique |> sort

join(pbullets, "\n") |> Markdown.parse
```



## NounRule



- use a `NounIO` object to read delimited text. The result is a `TabulaeNounRule`.


```
nounruletext = "latcommoninfl.0_is2|0_is|is|masculine|genitive|singular"

nounio = NounIO("noun io")
nounrule = Tabulae.readrulerow(nounio, nounruletext)
```



Inflectional types appearing in the core dataset's noun rules:

```
#| asis: true
#| echo: false
nounrules = filter(s -> s isa TabulaeNounRule, rules)
bullets = map(s -> "1. " * inflectionclass(s), nounrules) |> unique |> sort

join(bullets, "\n") |> Markdown.parse
```
