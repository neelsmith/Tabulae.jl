---
title: "Build a parser and parse Latin strings"
---

```{julia}
#| echo: false
#| output: false
#repo  = pwd()
repo = pwd() |> dirname |> dirname

```


::: {.callout-tip collapse="true" title="Follow along"}



To replicate all the steps in this tutorial:

- [install Julia](https://julialang.org/downloads/) if you haven't already done so
- download or clone the [Tabulae.jl repository](https://github.com/neelsmith/Tabulae.jl)
- start a Julia REPL
- assign to the variable `repo` the path to the cloned repository
:::

## Building a parser from local files


You can build a parser from one or more sets of delimited-text files organized in [directories following Tabulae's conventions](https://neelsmith.quarto.pub/tabulae/reference/file_layout.html). In this tutorial, we'll use the files in the [`core-infl-shared`](https://github.com/neelsmith/Tabulae.jl/tree/main/datasets/core-infl-shared) and 
[`core-infl-lat25`](https://github.com/neelsmith/Tabulae.jl/tree/main/datasets/core-infl-lat25) directories in the `datasets` directory of the Tabulae github repository. 

If you have a variable named `repo` with the root directory of the Tabulae repository, then the full path to the directories will:

```{julia}
#| output: false
shareddir = joinpath(repo, "datasets", "core-infl-shared") 
lat25dir = joinpath(repo, "datasets", "core-infl-lat25") 
```

### Instantiate a data set

You can create a `Tabulae.DataSet` from a list of one or more directories.

```{julia}
#| output: false
using Tabulae
ds = dataset([shareddir, lat25dir])
```



### Compile a parser

You can then build a parser from a data set.

```{julia}
#| warnings: false
#| output: false
p = stringParser(ds)
```



### Interactive parsing

Use the `parsetoken` function to parse a string with a parser.


```{julia}
s = "agricolae"
parses = parsetoken(s, p)
```


### Morphological analyses

The result is a Vector of analyses. Each `Analysis` includes identifiers for a  *morphological form* object and a *lexeme* (or vocabulary item). You can use the `lexemeurn` function (from the `CitableParserBuilder` package) to extract the lexeme's identifier from an `Analysis`.


```{julia}
using CitableParserBuilder
parses[1] |> lexemeurn
```

Tabulae's `latinForm` function extracts the form identifier from an analysis, and creates a `LatinMorphologicalForm`from it.  You can use the `label` function to compose a human-readable string value for a Latin form. We'll take advantages of Julia's `.` broadcasting to label all analyses in the results.

```{julia}
parses .|> latinForm .|> label
```

