
# Working with analyzed forms

```{julia}
#| echo: false
#| output: false
#repo  = pwd()
repo = pwd() |> dirname |> dirname

```


::: {.callout-tip collapse="true" title="Follow along"}

To replicate all the steps in this tutorial:

- [install Julia](https://julialang.org/downloads/) if you haven't already done so
- download or clone the [Tabulae.jl repository](https://github.com/neelsmith/Tabulae.jl)
- start a Julia REPL
- assign to the variable `repo` the path to the cloned repository
:::

Start by repeating the steps from the [introductory tutorial](./parser.qmd) to compile a parser, and assign it to variable named `parser`:

```{julia}
#| code-fold: true
#| code-summary: Compile a parser
#| warning: false
#| output: false
using Tabulae

shareddir = joinpath(repo, "datasets", "core-infl-shared") 
lat25dir = joinpath(repo, "datasets", "core-infl-lat25") 

parser = dataset([shareddir, lat25dir]) |> tabulaeStringParser
```


## Morphological analyses

When we parse a token, the result is a Vector of *analyses*. Each analysis assocates the token with four identifiers (as you can see in the parser output). If the form is unambiguous, the Vector will have only one element:

```{julia}
using CitableParserBuilder
verbparses = parsetoken("amabatur", parser)
```

If the form is morphologically ambiguous, the results will include an analysis for each possibility.


```{julia}
nounparses = parsetoken("agricolae", parser)
```




## Morphological forms and properties


Use the `latinForm` function to construct a Latin morphological *form*  from the identifier in a morphological analysis. Morpological forms belong to subtypes of the abstract `LatinMorphologicalForm` type.  The following cells, for example create `LMFNoun` and `LMFFiniteVerb` forms from our previous analyses. 

```{julia}
nounexample = latinForm(nounparses[1])
typeof(nounexample)
```



```{julia}
verbexample = latinForm(verbparses[1])
typeof(verbexample)
```

These different types of form have different properties, as the default display suggests.  Noun forms have properties for gender, case and number, while finite verb forms have properties for tense, mood, voice, person and number.

```{julia}
nounexample
```


```{julia}
verbexample
```


We can get at any property of a Latin form with a function having a name beginning with lower-case `lmp` followed by the property name. For example, the `lmpCase` function gets the morphological property of case, and `lmpTense` gets the tense property.

```{julia}
casevalue =  lmpCase(nounexample)
```


```{julia}
tensevalue = lmpTense(verbexample)
```

::: {.callout-tip title="Labelling morphological properties" collapse="true" }

As with morphological forms, morphological properties are *not* string values, so you need a string label for a property value, use the same `label` you used with morphological forms:

```{julia}
label(casevalue)
```
:::


The same functions that retrieve a property from a form can also be used  to construct a property from a string value.  For example, you can use `lmpTense` to construct a property for tense.


```{julia}
lmpTense("perfect")
```

We can take advantage of this in normal Julia operations on collections of analyses. For instance, in the following cell we separate out all the analyses for the token *agricolae* with *plural* forms, and extract the form object from them:

```{julia}
pluralvalue = lmpNumber("plural")
pluralnouns = filter(parse -> lmpNumber(latinForm(parse)) == pluralvalue, nounparses)
latinForm.(pluralnouns)
```

## Morphological forms and "parts of speech"


Note that the various types of `LatinMorphologicalForm` are *not* equivalent to a traditional "part of speech." Rather, they are *analytical types* defined by their unique set of properties. "Verbs" as a category for part of speech include multiple types of morphological forms: finite verbs like the example above, but also infinitives, participles, and other forms.

Consider the ambiguity of the token *amare*, for example.

```{julia}
multiparses = parsetoken("amare", parser)
multiforms = latinForm.(multiparses)
```

One of the forms is an infinitive, with only two morphological properties, for tense and voice.  Compare the types of the forms.

```{julia}
typeof.(multiforms)
```

We can meaningfully look at tense properties for all of the forms.

```{julia}
lmpTense.(multiforms)
```

but if we apply the `lmpPerson` function to an infinitive, we get a warning, and resulting value of `nothing`.

```{julia}
#| warning: false
 lmpPerson.(multiforms)
```