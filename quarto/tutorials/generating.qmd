---
editor:
    render-on-save: true
---



# Generating analyses

```{julia}
#| echo: false
#| output: false
#repo  = pwd()
repo = pwd() |> dirname |> dirname
```


In Tabulae's model, a parser is just a collection of pre-computed analyses.

## rule + stem == analysis

The tables of data that Tabulae uses to build a parser are grouped into stems and rules.  The combination of a stem and a rule yields an `Analysis` object. You can generate a single analysis with the `analysis` function.


```{julia}
using CitableBase, Tabulae
vstem = fromcex("latcommon.verbn12387|ls.n12387|deb|conj2", TabulaeVerbStem)
vrule = fromcex("latcommon.ere_conj2fut3|conj2|ebit|third|singular|future|indicative|active", TabulaeFiniteVerbRule)
verbanalysis = analysis(vstem, vrule)
```


## Analyses from data in a dataset

A dataset gives you a collection of stems and rules to work with, stored in delimited text files. 

```{julia}
coresrcdir = joinpath(repo, "datasets", "core-infl-shared") 
tds = dataset([coresrcdir])
```

You can use the `analyses` function to generate analyses from the stems and rules in a dataset:

- for a specific lexeme in a specific form
- for all forms of a lexeme
- for all forms of all lexemes in the dataset. The resulting set of anlayses is a "parser."



### Lexeme + form


```{julia}
using CitableParserBuilder
lex = LexemeUrn("ls.n12387")
verbform = LMFFiniteVerb(lmpPerson("third"), lmpNumber("singular"), lmpTense("future"), lmpMood("indicative"), lmpVoice("active"))
analyses(lex, verbform, tds)
```

While the combination of a single rule + stem yields a single analysis, a lexeme + a form always yields a *vector* of analyses, since some combinations could produce more than one token value.

```{julia}
credo = LexemeUrn("ls.n11525")
futind2sgpass = LMFFiniteVerb(lmpPerson("second"), lmpNumber("singular"), lmpTense("present"), lmpMood("indicative"),  lmpVoice("passive"))
multianalyses = analyses(credo, futind2sgpass, tds)
```

### All forms of a lexeme

```{julia}
animus = LexemeUrn("ls.n2636")
animus_analyzed = analyses(animus, tds)
```

### All forms of all lexemes

```{julia}
analysisvect = analyses(tds)
```



## Parsers

Generating all analyses possible for a dataset is a parser!

```{julia}
parser = tabulaeStringParser(tds)
parses = parsetoken("animo", parser)
```

*animo* is morphologically ambiguous: it has two possible analyses.  We'll use the `latinForm` function to see the morphological form of the first analysis.


```{julia}
form1 = latinForm(parses[1])
```

We'll now try to generate the same form using identifying URNs for the form and the lexeme.

```{julia}
lex = lexemeurn(parses[1])
mform = formurn(parses[1])

generated = analyses(lex, mform, tds)
```

The result is a vector of `Analysis` objects -- the same structure that  `parsetoken` returns, but we only have one possible result for this specific form of this lexeme.  The `token` function extracts the string value of the token from an analysis

```{julia}
token(generated[1])
```

